colnames(tabla) <- namescolumnas
}
} else{
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- prop.table(tabla)
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de varible1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
if(tipo == 1){
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,2)
} else{
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,1)
}
}
}
if (exportar) {
filename <- paste("Tabla cruzada de ", variable1," y ", variable2, " (", Sys.time(), ").xlsx", sep = "")
filename <- gsub(" ", "_", filename)
filename <- gsub(":", ".", filename)
rio::export(tabla, file = filename)
}
return(tabla)
}
tabla.bidimensional(startup)
#' \emph{Métodos Cuantitativos para la Medición de la Cultura (MC2). Economía Aplicada.}
#' Universidad de Valencia (España)
#'
#' @references
#' Esteban García, J. et al. (2005). Estadística descriptiva y nociones de probabilidad. Thomson.
#'
#'
#' @import tidyverse
#'
#' @export
tabla.bidimensional <- function(x,
distribucion = c("cruzada","condicionada"),
frecuencias = c("absolutas","relativas"),
exportar = TRUE){
distribucion <- tolower(distribucion)
distribucion <- match.arg(distribucion)
frecuencias <- tolower(frecuencias)
frecuencias <- match.arg(frecuencias)
x <- as.data.frame(x) %>%
na.omit
varnames <- colnames(x)
numvariables <- length(x)
variable1 <- readline(prompt = "Intoduce el nombre de la variable 1 (filas): ")
variable2 <- readline(prompt = "Intoduce el nombre de la variable 2 (columnas): ")
variable <- c(variable1,variable2) #nombres de las variables
if(variable1 %in% varnames){
variable1 = which(varnames == variable1)
} else{
stop("Comprueba el nombre de la variable")
}
if(variable2 %in% varnames){
variable2 = which(varnames == variable2)
} else{
stop("Comprueba el nombre de la variable")
}
x <- x %>%
select(variable1,variable2)
names(x) <- c("filas","columnas")
clase <- sapply(x, class)
if (!all(clase %in% c("numeric","integer","factor","logic"))){
stop("No puede construirse la tabla de frecuencias, alguna variable seleccionada es caracter")
}
if(frecuencias == "absolutas"){
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de variable1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
tabla2 <- x %>%
table()
namesfilas <- row.names(tabla2)
namescolumnas <- colnames(tabla2)
if(tipo == 1){
tabla_aux <- x %>%
select(tipo) %>%
group_by(filas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namescolumnas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n))
} else{
tabla_aux <- x %>%
select(tipo) %>%
group_by(columnas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namesfilas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n)) %>%
t()
}
tabla <-  tabla_aux * as.matrix(prop.table(tabla2,tipo))
row.names(tabla) <- namesfilas
colnames(tabla) <- namescolumnas
}
} else{
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- prop.table(tabla)
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de varible1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
if(tipo == 1){
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,2)
} else{
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,1)
}
}
}
if (exportar) {
filename <- paste("Tabla cruzada de ", variable1," y ", variable2, " (", Sys.time(), ").xlsx", sep = "")
filename <- gsub(" ", "_", filename)
filename <- gsub(":", ".", filename)
rio::export(tabla, file = filename)
}
return(tabla)
}
tabla.bidimensional(startup)
tabla.bidimensional(startup)
#' \emph{Métodos Cuantitativos para la Medición de la Cultura (MC2). Economía Aplicada.}
#' Universidad de Valencia (España)
#'
#' @references
#' Esteban García, J. et al. (2005). Estadística descriptiva y nociones de probabilidad. Thomson.
#'
#'
#' @import tidyverse
#'
#' @export
tabla.bidimensional <- function(x,
distribucion = c("cruzada","condicionada"),
frecuencias = c("absolutas","relativas"),
exportar = TRUE){
distribucion <- tolower(distribucion)
distribucion <- match.arg(distribucion)
frecuencias <- tolower(frecuencias)
frecuencias <- match.arg(frecuencias)
x <- as.data.frame(x) %>%
na.omit
varnames <- colnames(x)
numvariables <- length(x)
variable1 <- readline(prompt = "Intoduce el nombre de la variable 1 (filas): ")
variable2 <- readline(prompt = "Intoduce el nombre de la variable 2 (columnas): ")
variable <- c(variable1,variable2) #nombres de las variables
if(variable1 %in% varnames){
variable1 = which(varnames == variable1)
} else{
stop("Comprueba el nombre de la variable")
}
if(variable2 %in% varnames){
variable2 = which(varnames == variable2)
} else{
stop("Comprueba el nombre de la variable")
}
x <- x %>%
select(variable1,variable2)
names(x) <- c("filas","columnas")
clase <- sapply(x, class)
if (!all(clase %in% c("numeric","integer","factor","logic"))){
stop("No puede construirse la tabla de frecuencias, alguna variable seleccionada es caracter")
}
if(frecuencias == "absolutas"){
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de variable1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
tabla2 <- x %>%
table()
namesfilas <- row.names(tabla2)
namescolumnas <- colnames(tabla2)
if(tipo == 1){
tabla_aux <- x %>%
select(tipo) %>%
group_by(filas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namescolumnas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n))
} else{
tabla_aux <- x %>%
select(tipo) %>%
group_by(columnas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namesfilas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n)) %>%
t()
}
tabla <-  tabla_aux * as.matrix(prop.table(tabla2,tipo))
row.names(tabla) <- namesfilas
colnames(tabla) <- namescolumnas
}
} else{
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- prop.table(tabla)
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de varible1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
if(tipo == 1){
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,2)
} else{
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,1)
}
}
}
tabla <- as.data.table (tabla)
if (exportar) {
filename <- paste("Tabla cruzada de ", variable1," y ", variable2, " (", Sys.time(), ").xlsx", sep = "")
filename <- gsub(" ", "_", filename)
filename <- gsub(":", ".", filename)
rio::export(tabla, file = filename)
}
return(tabla)
}
tabla.bidimensional(startup)
#' \emph{Métodos Cuantitativos para la Medición de la Cultura (MC2). Economía Aplicada.}
#' Universidad de Valencia (España)
#'
#' @references
#' Esteban García, J. et al. (2005). Estadística descriptiva y nociones de probabilidad. Thomson.
#'
#'
#' @import tidyverse
#'
#' @export
tabla.bidimensional <- function(x,
distribucion = c("cruzada","condicionada"),
frecuencias = c("absolutas","relativas"),
exportar = TRUE){
distribucion <- tolower(distribucion)
distribucion <- match.arg(distribucion)
frecuencias <- tolower(frecuencias)
frecuencias <- match.arg(frecuencias)
x <- as.data.frame(x) %>%
na.omit
varnames <- colnames(x)
numvariables <- length(x)
variable1 <- readline(prompt = "Intoduce el nombre de la variable 1 (filas): ")
variable2 <- readline(prompt = "Intoduce el nombre de la variable 2 (columnas): ")
variable <- c(variable1,variable2) #nombres de las variables
if(variable1 %in% varnames){
variable1 = which(varnames == variable1)
} else{
stop("Comprueba el nombre de la variable")
}
if(variable2 %in% varnames){
variable2 = which(varnames == variable2)
} else{
stop("Comprueba el nombre de la variable")
}
x <- x %>%
select(variable1,variable2)
names(x) <- c("filas","columnas")
clase <- sapply(x, class)
if (!all(clase %in% c("numeric","integer","factor","logic"))){
stop("No puede construirse la tabla de frecuencias, alguna variable seleccionada es caracter")
}
if(frecuencias == "absolutas"){
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de variable1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
tabla2 <- x %>%
table()
namesfilas <- row.names(tabla2)
namescolumnas <- colnames(tabla2)
if(tipo == 1){
tabla_aux <- x %>%
select(tipo) %>%
group_by(filas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namescolumnas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n))
} else{
tabla_aux <- x %>%
select(tipo) %>%
group_by(columnas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namesfilas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n)) %>%
t()
}
tabla <-  tabla_aux * as.matrix(prop.table(tabla2,tipo))
row.names(tabla) <- namesfilas
colnames(tabla) <- namescolumnas
}
} else{
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- prop.table(tabla)
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de varible1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
if(tipo == 1){
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,2)
} else{
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,1)
}
}
}
tabla <- as.data.frame (tabla)
if (exportar) {
filename <- paste("Tabla cruzada de ", variable1," y ", variable2, " (", Sys.time(), ").xlsx", sep = "")
filename <- gsub(" ", "_", filename)
filename <- gsub(":", ".", filename)
rio::export(tabla, file = filename)
}
return(tabla)
}
tabla.bidimensional(startup)
tabla
x <- startup
distribucion = "cruzada"
frecuencias = "absolutas"
exportar = T
distribucion <- tolower(distribucion)
distribucion <- match.arg(distribucion)
frecuencias <- tolower(frecuencias)
frecuencias <- match.arg(frecuencias)
x <- as.data.frame(x) %>%
na.omit
varnames <- colnames(x)
varnames
numvariables <- length(x)
variable1 <- readline(prompt = "Intoduce el nombre de la variable 1 (filas): ")
variable <- c(variable1,variable2) #nombres de las variables
variable1 <- readline(prompt = "Intoduce el nombre de la variable 1 (filas): ")
variable2 <- readline(prompt = "Intoduce el nombre de la variable 2 (columnas): ")
variable <- c(variable1,variable2) #nombres de las variables
if(variable1 %in% varnames){
variable1 = which(varnames == variable1)
} else{
stop("Comprueba el nombre de la variable")
}
if(variable2 %in% varnames){
variable2 = which(varnames == variable2)
} else{
stop("Comprueba el nombre de la variable")
}
x <- x %>%
select(variable1,variable2)
names(x) <- c("filas","columnas")
x
clase <- sapply(x, class)
if (!all(clase %in% c("numeric","integer","factor","logic"))){
stop("No puede construirse la tabla de frecuencias, alguna variable seleccionada es caracter")
}
if(frecuencias == "absolutas"){
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de variable1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
tabla2 <- x %>%
table()
namesfilas <- row.names(tabla2)
namescolumnas <- colnames(tabla2)
if(tipo == 1){
tabla_aux <- x %>%
select(tipo) %>%
group_by(filas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namescolumnas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n))
} else{
tabla_aux <- x %>%
select(tipo) %>%
group_by(columnas) %>%
count() %>%
ungroup() %>%
select(n)
n = length(namesfilas)
tabla_aux <- cbind(tabla_aux, replicate(n-1,tabla_aux$n)) %>%
t()
}
tabla <-  tabla_aux * as.matrix(prop.table(tabla2,tipo))
row.names(tabla) <- namesfilas
colnames(tabla) <- namescolumnas
}
} else{
if(distribucion == "cruzada"){
tabla <- x %>%
table()
tabla <- prop.table(tabla)
tabla <- addmargins(tabla)
} else{
print("Si quieres obtener la distribuci\'on de varible1/variable2 (por filas) introduce el valor 1, en caso contrario variable2/variable1 (por columnas) introduce el valor 2")
tipo <- readline(prompt = "Distribuci\'on condicionada por filas (1) o por columnas (2): ")
tipo = as.numeric(tipo)
if(tipo == 1){
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,2)
} else{
tabla2 <- x %>%
table()
tabla <- prop.table(tabla2,1)
}
}
}
tabla
tabla
class(tabla)
tabla <- as.matrix(tabla)
tabla
if (exportar) {
filename <- paste("Tabla cruzada de ", variable1," y ", variable2, " (", Sys.time(), ").xlsx", sep = "")
filename <- gsub(" ", "_", filename)
filename <- gsub(":", ".", filename)
rio::export(tabla, file = filename)
}
variable1
if (exportar) {
filename <- paste("Tabla cruzada de ", variable[1]," y ", variable[2], " (", Sys.time(), ").xlsx", sep = "")
filename <- gsub(" ", "_", filename)
filename <- gsub(":", ".", filename)
rio::export(tabla, file = filename)
}
library(estadistica)
library(estadistica)
library(estadistica)
library(estadistica)
library(estadistica)
library(estadistica)
resumen.descriptivos(startup)
library(estadistica)
resumen.descriptivos(startup)
library(estadistica)
resumen.descriptivos(startup)
library(estadistica)
library(estadistica)
library(estadistica)
library(estadistica)
library(estadistica)
ic.media(introducir = T,grafico = T)
ic.media(introducir = T,grafico = T, var_pob = "desconocida")
ic.media(introducir = T,grafico = T, var_pob = "desconocida", poblacion = "desconocida")
library(estadistica)
ic.media(introducir = T, grafico = T)
ic.media(introducir = T, grafico = T, poblacion = "desconocida")
ic.media(introducir = T, grafico = T, poblacion = "desconocida", poblacion = "desconocida")
ic.media(introducir = T, poblacion = "desconocida", var_pob = "desconocida")
ic.media(introducir = T, grafico = T, poblacion = "desconocida", poblacion = "desconocida")
ic.media(introducir = T, grafico = T, var_pob =  = "desconocida", poblacion = "desconocida")
ic.media(introducir = T, grafico = T, var_pob = "desconocida", poblacion = "desconocida")
media(startup)
media(startup, variable = 5)
library(estadistica)
media(startup, variable = 5)
library(estadistica)
library(estadistica)
muestra(error_estimacion = 300)
leer.datos(introducir = T)
library(estadistica)
leer.datos(introducir = T)
